// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.20.3
// source: packages/grpc/proto/post_service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "post_service";

export interface PaginationDto {
  page: number;
  size: number;
}

export interface CreateMediaDto {
  url: string;
  type: string;
}

export interface CreatePostDto {
  content: string;
  mediaUrl: string;
  mediaType: string;
  authorId: string;
}

export interface GetPostByIdDto {
  postId: string;
}

export interface GetPostByUserIdDto {
  authorId: string;
}

export interface Posts {
  posts: Post[];
}

export interface LikePostDto {
  postId: string;
  userId: string;
}

export interface CommentPostDto {
  postId: string;
  userId: string;
  text: string;
}

export interface Post {
  id: string;
  content: string;
  media: Media[];
  authorId: string;
  createdAt: string;
  updatedAt: string;
  likes: Like[];
  comments: Comment[];
}

export interface Like {
  id: string;
  postId: string;
  userId: string;
  createdAt: string;
}

export interface Comment {
  id: string;
  postId: string;
  userId: string;
  text: string;
  createdAt: string;
}

export interface Media {
  id: string;
  url: string;
  type: string;
}

export const POST_SERVICE_PACKAGE_NAME = "post_service";

export interface PostServiceClient {
  createPost(request: CreatePostDto): Observable<Post>;

  getAllPosts(request: PaginationDto): Observable<Posts>;

  getPostById(request: GetPostByIdDto): Observable<Post>;

  getPostByUserId(request: GetPostByUserIdDto): Observable<Posts>;

  likePost(request: LikePostDto): Observable<Post>;

  commentPost(request: CommentPostDto): Observable<Post>;

  createMedia(request: CreateMediaDto): Observable<Media>;
}

export interface PostServiceController {
  createPost(request: CreatePostDto): Promise<Post> | Observable<Post> | Post;

  getAllPosts(request: PaginationDto): Promise<Posts> | Observable<Posts> | Posts;

  getPostById(request: GetPostByIdDto): Promise<Post> | Observable<Post> | Post;

  getPostByUserId(request: GetPostByUserIdDto): Promise<Posts> | Observable<Posts> | Posts;

  likePost(request: LikePostDto): Promise<Post> | Observable<Post> | Post;

  commentPost(request: CommentPostDto): Promise<Post> | Observable<Post> | Post;

  createMedia(request: CreateMediaDto): Promise<Media> | Observable<Media> | Media;
}

export function PostServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createPost",
      "getAllPosts",
      "getPostById",
      "getPostByUserId",
      "likePost",
      "commentPost",
      "createMedia",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const POST_SERVICE_NAME = "PostService";
