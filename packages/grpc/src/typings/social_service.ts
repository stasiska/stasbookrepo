// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.20.3
// source: packages/grpc/proto/social_service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "social_service";

export interface UserIdReq {
  userId: string;
}

export interface FriendRes {
  status: string;
}

export interface FollowRes {
  status: string;
}

export interface FollowDto {
  fromUserId: string;
  toUserId: string;
}

export interface FriendDto {
  requesterId: string;
  targetId: string;
}

export interface CreateGroupDto {
  ownerId: string;
  name: string;
  description: string;
}

export interface GroupActionDto {
  userId: string;
  groupId: string;
}

export interface GroupRes {
  groupId: string;
  status: string;
}

export interface UserList {
  userIds: string[];
}

export interface GroupList {
  groupList: Group[];
}

export interface Group {
  id: string;
  name: string;
  description: string;
  ownerId: string;
}

export const SOCIAL_SERVICE_PACKAGE_NAME = "social_service";

export interface SocialServiceClient {
  follow(request: FollowDto): Observable<FollowRes>;

  unFollow(request: FollowDto): Observable<FollowRes>;

  addFriend(request: FriendDto): Observable<FriendRes>;

  removeFriend(request: FriendDto): Observable<FriendRes>;

  createGroup(request: CreateGroupDto): Observable<GroupRes>;

  joinGroup(request: GroupActionDto): Observable<GroupRes>;

  leaveGroup(request: GroupActionDto): Observable<GroupRes>;

  getUserFriends(request: UserIdReq): Observable<UserList>;

  getUserFollowers(request: UserIdReq): Observable<UserList>;

  getUserGroups(request: UserIdReq): Observable<GroupList>;
}

export interface SocialServiceController {
  follow(request: FollowDto): Promise<FollowRes> | Observable<FollowRes> | FollowRes;

  unFollow(request: FollowDto): Promise<FollowRes> | Observable<FollowRes> | FollowRes;

  addFriend(request: FriendDto): Promise<FriendRes> | Observable<FriendRes> | FriendRes;

  removeFriend(request: FriendDto): Promise<FriendRes> | Observable<FriendRes> | FriendRes;

  createGroup(request: CreateGroupDto): Promise<GroupRes> | Observable<GroupRes> | GroupRes;

  joinGroup(request: GroupActionDto): Promise<GroupRes> | Observable<GroupRes> | GroupRes;

  leaveGroup(request: GroupActionDto): Promise<GroupRes> | Observable<GroupRes> | GroupRes;

  getUserFriends(request: UserIdReq): Promise<UserList> | Observable<UserList> | UserList;

  getUserFollowers(request: UserIdReq): Promise<UserList> | Observable<UserList> | UserList;

  getUserGroups(request: UserIdReq): Promise<GroupList> | Observable<GroupList> | GroupList;
}

export function SocialServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "follow",
      "unFollow",
      "addFriend",
      "removeFriend",
      "createGroup",
      "joinGroup",
      "leaveGroup",
      "getUserFriends",
      "getUserFollowers",
      "getUserGroups",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SocialService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SocialService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SOCIAL_SERVICE_NAME = "SocialService";
